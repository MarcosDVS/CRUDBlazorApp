<!--
Componente ProductIndex
Se encarga de administrar la lista de productos en el frontend.
- productos: almacena todos los productos cargados.
- productoActual: representa el producto que se está creando o editando.
- mostrarFormulario: controla si se muestra el formulario de creación/edición.
- mensajeError: almacena mensajes de error para mostrar en la interfaz.
-->
@page "/productos"

<div class="d-flex justify-content-between align-items-center my-4">
    <!-- Título centrado -->
    <h3 class="text-primary fw-bold mb-0 text-center flex-grow-1">
        Gestión de Productos
    </h3>

    <!-- Botón al extremo derecho -->
    <button class="btn btn-primary shadow-sm ms-3" @onclick="MostrarFormulario">
        <i class="fas fa-plus me-1"></i> Agregar
    </button>
</div>


@* -------------------- ALERTA -------------------- *@
@if (mostrarAlerta)
{
        <div class="alert alert-success alert-dismissible fade show text-center mx-auto w-50" role="alert">
        @mensajeAlerta
            <button type="button" class="btn-close" @onclick="() => mostrarAlerta = false"></button>
        </div>
}

@* -------------------- TABLA DE PRODUCTOS -------------------- *@
@if (productos is null)
{
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">Cargando productos...</p>
        </div>
}
else if (!productos.Any())
{
        <div class="alert alert-info text-center">No hay productos disponibles.</div>
}
else
{
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-primary text-center">
                    <tr>
                        <th>#</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Precio</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var (p, index) in productos.Select((p, i) => (p, i + 1)))
                {
                            <tr>
                                <td class="text-center">@index</td>
                                <td>@p.Nombre</td>
                                <td>@p.Descripcion</td>
                                <td>@p.Precio.ToString("C")</td>
                                <td class="text-center">
                                    <button class="btn btn-warning btn-sm me-2 shadow-sm" @onclick="() => EditarProducto(p)">
                                        <i class="fas fa-edit fw-bold"> Edit</i>
                                    </button>
                                    <button class="btn btn-danger btn-sm shadow-sm" @onclick="() => EliminarProducto(p.Id)">
                                        <i class="fas fa-trash fw-bold"> Delete</i>
                                    </button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
        </div>
}

@* -------------------- MODAL DE FORMULARIO -------------------- *@
@if (mostrarFormulario)
{
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content shadow rounded-4 border-0">
                    <div class="modal-header bg-primary text-white rounded-top-4">
                        <h5 class="modal-title">@((productoActual.Id == 0) ? "Agregar Producto" : "Editar Producto")</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="Cancelar"></button>
                    </div>
                    <div class="modal-body p-4">
                        <EditForm Model="productoActual" OnValidSubmit="GuardarProducto">
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Nombre</label>
                                <InputText class="form-control" @bind-Value="productoActual.Nombre" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Descripción</label>
                                <InputText class="form-control" @bind-Value="productoActual.Descripcion" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Precio</label>
                                <InputNumber class="form-control" @bind-Value="productoActual.Precio" required />
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-success me-2 shadow-sm">
                                    <i class="fas fa-save me-1"></i> Guardar
                                </button>
                                <button type="button" class="btn btn-secondary shadow-sm" @onclick="Cancelar">
                                    <i class="fas fa-times me-1"></i> Cancelar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
}

@code {
    private List<Producto> productos = new();
    private Producto productoActual = new();
    private bool mostrarFormulario = false;
    private string? mensajeAlerta;
    private bool mostrarAlerta = false;

    [Inject] private IRepository Repository { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    protected override async Task OnInitializedAsync() => await CargarProductos();

    private async Task CargarProductos()
    {
        productos = await Repository.GetAsync<List<Producto>>("api/productos");
    }

    private void MostrarFormulario()
    {
        productoActual = new Producto();
        mostrarFormulario = true;
    }

    private void EditarProducto(Producto producto)
    {
        productoActual = new Producto
            {
                Id = producto.Id,
                Nombre = producto.Nombre,
                Descripcion = producto.Descripcion,
                Precio = producto.Precio
            };
        mostrarFormulario = true;
    }

    private async Task GuardarProducto()
    {
        if (productoActual.Id == 0)
            await Repository.PostAsync("api/productos", productoActual);
        else
            await Repository.PutAsync($"api/productos/{productoActual.Id}", productoActual);

        await CargarProductos();
        mostrarFormulario = false;
        mensajeAlerta = "Producto guardado exitosamente.";
        mostrarAlerta = true;
    }

    private async Task EliminarProducto(int id)
    {
        await Repository.DeleteAsync($"api/productos/{id}");
        await CargarProductos();
        mensajeAlerta = "Producto eliminado exitosamente.";
        mostrarAlerta = true;
    }

    private void Cancelar() => mostrarFormulario = false;
}
